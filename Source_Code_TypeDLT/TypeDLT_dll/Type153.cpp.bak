#include <cmath>
#include <fstream>
#include "TRNSYS.h" //TRNSYS acess functions (allow to acess TIME etc.)
#include <sstream> // for string streams
#include <cstdlib> // for atof, abort
#include <iostream>
#include <sys/types.h>
#include <dirent.h>
#include <string>
#include <limits>
//************************************************************************
// Object: TypeDLT
// IISiBat Model: Type153
//
// Author(s):  Ulrich Filippi Oberegger, Giuseppe De Michele
// Purpose:    Enabling daylighting simulations within TRNSYS.
// Copyright:  (c) 2015, Accademia Europea Bolzano (EURAC)
//
//             This program is free software under the BSD 3-Clause License.
//             Read the file LICENSE.txt that comes with TypeDLT for details.
//*************************************************************************
// 
// *** 
// *** Model Parameters 
// *** 

// *** 
// *** Model Inputs 
// *** 
//			Latitude	degrees [-90;90]
//			Longitude	degrees [-180;180]
//			Time Zone	- [-12;12]
//			Direct normal illuminance	lux [0;+Inf]
//			Diffuse horizontal illuminance	lux [0;+Inf]
//			Month	any [1;12]
//			Day of the month	day [1;31]
//			Hour of the day	hr [0;24]
//			ZoneID	- [1;+Inf]
//			Control1	- [0;+Inf]
//			Control2	- [-Inf;+Inf]
//			Control3	- [-Inf;+Inf]
//			Control4	- [-Inf;+Inf]
//			Control5	- [-Inf;+Inf]
//			Control6	- [-Inf;+Inf]
//			Control7	- [-Inf;+Inf]
//			Control8	- [-Inf;+Inf]
//			Control9	- [-Inf;+Inf]
//			Control10	- [-Inf;+Inf]

// *** 
// *** Model Outputs 
// *** 
//			Maximum illuminance	lux [0;+Inf]
//			Minimum illuminance	lux [0;+Inf]
//			Average illuminance	lux [0;+Inf]
//			Control1	- [0;+Inf]
//			Control2	- [-Inf;+Inf]
//			Control3	- [-Inf;+Inf]
//			Control4	- [-Inf;+Inf]
//			Control5	- [-Inf;+Inf]
//			Control6	- [-Inf;+Inf]
//			Control7	- [-Inf;+Inf]
//			Control8	- [-Inf;+Inf]
//			Control9	- [-Inf;+Inf]
//			Control10	- [-Inf;+Inf]

// *** 
// *** Model Derivatives 
// *** 

// (Comments and routine interface generated by TRNSYS Studio)
//************************************************************************

//
extern "C" __declspec(dllexport) 
int TYPE153           (
             double &time,  // the simulation time
             double xin[],  // the array containing the component InpUTS
             double xout[], // the array which the component fills with its appropriate OUTPUTS
             double &t,     // the array containing the dependent variables for which the derivatives are evaluated 
             double &dtdt,  // the array containing the derivatives of T which are evaluated 
             double par[],  // the array containing the PARAMETERS of the component
             int info[],    // the information array described in Section 3.3.3 of the manual
             int icntrl     // the control array described in Section 3.3.4 of the manual
            )
{
  //*************************************************************************
  //*** TYPE implementation
  //*** This function will be called by TRNSYS 
  //*** - once at the beginning of the simulation for initialization
  //*** - once at the beginning of every timestep for initialization
  //*** - once for each iteration of the TRNSYS solver
  //*** - once at the end of each timestep for cleanup
  //*** - once at the end of the simulation for cleanup
  //*************************************************************************
  // 
  //***
  //*** WARNING: explanations in the TRNSYS manual use FORTRAN conventions for 
  //***          array indices. Subtract 1 to obtain 0-based C or C++ conventions. 
  //*** Example: 
  //***          TRNSYS manual: info(6) = number of OUTPUTS 
  //***          -> write no = info[5] to obtain number of outputs in C or C++
  //***
  //*** We also spell variables in lower case according to C tradition, while they
  //*** are spelled in uppercase in the TRNSYS manual (according to FORTRAN tradition)
  //*** 


//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------

  // *** STANDARD TRNSYS DECLARATIONS
  int npar= 0;   // number of parameters we expect
  int nin= 19;   // number of inputs
  int nout=13; // number of outputs
  int nder=0;   // number of derivatives
  int iunit; // UNIT number ('serial number' of the component, from the input file (the 'deck')
  int itype; // TYPE number (component number) 
  // read context information from TRNSYS
  // (uncomment lines as required)
	info[5] = nout;  // number of outputs 

	iunit = info[0]; // UNIT number
	itype = info[1]; // TYPE number

	//info[2]	; // number of INPUTS specified by the user of the component 
	//info[3]	; // number of PARAMETERS specified by the user of the component
	//info[4]	; // number of DERIVATIVES specified by the user of the component
	//info[5]	; // number of OUTPUTS specified by the user of the component

  //info[6]	; // number of iterative calls to the UNIT in the current timestep
              // -2 = initialization
              // -1	= initial call in simulation for this UNIT
	            //  0 = first call in timestep for this UNIT.
              //  1	= second call in timestep for this UNIT, etc.

	//info(7)	; // total number of calls to the UNIT in the simulation
  // *** inform TRNSYS about properties of this type
  info[8] = 0; // indicates whether TYPE depends on the passage of time: 0=no
	info[9]	= 0; //	use to allocate storage (see Section 3.5 of the TRNSYS manual): 0 = none
	// info[10]; // indicates number of discrete control variables (see Section 3.3.4 of the TRNSYS manual)
//-----------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------
//    ADD DECLARATIONS AND DEFINITIONS FOR THE USER-VARIABLES HERE

//-----------------------------------------------------------------------------------------------------------------------

//    PARAMETERS

//    INPUTS
      double Latitude;
      double Longitude;
      double Time_Zone;
      double Direct_normal_illuminance;
      double Diffuse_horizontal_illuminance;
      double Month;
      double Day_of_the_month;
      double Hour_of_the_day;
      double ZoneID;
      int Control[10];

//-----------------------------------------------------------------------------------------------------------------------
//       READ IN THE VALUES OF THE PARAMETERS IN SEQUENTIAL ORDER

//-----------------------------------------------------------------------------------------------------------------------
//    RETRIEVE THE CURRENT VALUES OF THE INPUTS TO THIS MODEL FROM THE XIN ARRAY IN SEQUENTIAL ORDER

      Latitude=xin[0];
      Longitude=xin[1];
      Time_Zone=xin[2];
      Direct_normal_illuminance=xin[3];
      Diffuse_horizontal_illuminance=xin[4];
      Month=xin[5];
      Day_of_the_month=xin[6];
      Hour_of_the_day=xin[7];
      ZoneID=xin[8];
      for (int i=0;i<10;i++)
      {
          Control[i] = xin[i+9];
      }
	 iunit=info[0];
	 itype=info[1];

//-----------------------------------------------------------------------------------------------------------------------
//    SET THE VERSION INFORMATION FOR TRNSYS
      if (info[6]== -2) 
    {
	   info[11]=16;
     // add additional initialisation code here, if any
	   return 1;
    }
//-----------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------
//    DO ALL THE VERY LAST CALL OF THE SIMULATION MANIPULATIONS HERE
      if (info[7]== -1) 
	   return 1;
//-----------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------
//    PERFORM ANY 'AFTER-ITERATION' MANIPULATIONS THAT ARE REQUIRED HERE
//    e.g. save variables to storage array for the next timestep
      if (info[12]>0) 
      {
//	   nitems=0;
//	   stored[0]=... (if NITEMS > 0)
//        setStorageVars(STORED,NITEMS,INFO)
	     return 1;
      }
//-----------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------
//    DO ALL THE VERY FIRST CALL OF THE SIMULATION MANIPULATIONS HERE
      if (info[6]== -1) // first call of this component in the simulation
      {
//       SET SOME INFO ARRAY VARIABLES TO TELL THE TRNSYS ENGINE HOW THIS TYPE IS TO WORK
         info[5]=nout;				
         info[8]=1;				
	   info[9]=0;	// STORAGE FOR VERSION 16 HAS BEEN CHANGED				

//       SET THE REQUIRED NUMBER OF INPUTS, PARAMETERS AND DERIVATIVES THAT THE USER SHOULD SUPPLY IN THE INPUT FILE
//       IN SOME CASES, THE NUMBER OF VARIABLES MAY DEPEND ON THE VALUE OF PARAMETERS TO THIS MODEL....
         nin=19;
	       npar=0;
	       nder=0;
	       
//       CALL THE TYPE CHECK SUBROUTINE TO COMPARE WHAT THIS COMPONENT REQUIRES TO WHAT IS SUPPLIED IN 
//       THE TRNSYS INPUT FILE
    int dummy=1;
		TYPECK(&dummy,info,&nin,&npar,&nder);

//       SET THE NUMBER OF STORAGE SPOTS NEEDED FOR THIS COMPONENT
//         nitems=0;
//	     setStorageSize(nitems,info)

//       RETURN TO THE CALLING PROGRAM
         return 1;
      }


//-----------------------------------------------------------------------------------------------------------------------
//    DO ALL OF THE INITIAL TIMESTEP MANIPULATIONS HERE - THERE ARE NO ITERATIONS AT THE INTIAL TIME
      if (time < (getSimulationStartTime() +
       getSimulationTimeStep()/2.0)) 
       {
//       SET THE UNIT NUMBER FOR FUTURE CALLS
         iunit=info[0];
         itype=info[1];

//       CHECK THE PARAMETERS FOR PROBLEMS AND RETURN FROM THE SUBROUTINE IF AN ERROR IS FOUND
//         if(...) TYPECK(-4,INFO,0,"BAD PARAMETER #",0)

//       PERFORM ANY REQUIRED CALCULATIONS TO SET THE INITIAL VALUES OF THE OUTPUTS HERE
//		 Maximum illuminance
			xout[0]=0;
//		 Minimum illuminance
			xout[1]=0;
//		 Average illuminance
			xout[2]=0;
//		 Control1
			xout[3]=0;
//		 Control2
			xout[4]=0;
//		 Control3
			xout[5]=0;
//		 Control4
			xout[6]=0;
//		 Control5
			xout[7]=0;
//		 Control6
			xout[8]=0;
//		 Control7
			xout[9]=0;
//		 Control8
			xout[10]=0;
//		 Control9
			xout[11]=0;
//		 Control10
			xout[12]=0;

//       PERFORM ANY REQUIRED CALCULATIONS TO SET THE INITIAL STORAGE VARIABLES HERE
//         nitems=0;
//	   stored[0]=...

//       PUT THE STORED ARRAY IN THE GLOBAL STORED ARRAY
//         setStorageVars(stored,nitems,info)

//       RETURN TO THE CALLING PROGRAM
         return 1;

      }
//-----------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------
//    *** ITS AN ITERATIVE CALL TO THIS COMPONENT ***
//-----------------------------------------------------------------------------------------------------------------------

	    
//-----------------------------------------------------------------------------------------------------------------------
//    RETRIEVE THE VALUES IN THE STORAGE ARRAY FOR THIS ITERATION
//      nitems=
//	    getStorageVars(stored,nitems,info)
//      stored[0]=
//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------
//    CHECK THE INPUTS FOR PROBLEMS
//      if(...) TYPECK(-3,INFO,'BAD INPUT #',0,0)
//	if(IERROR.GT.0) RETURN 1
//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------
//    *** PERFORM ALL THE CALCULATION HERE FOR THIS MODEL. ***
//-----------------------------------------------------------------------------------------------------------------------

//		ADD YOUR COMPONENT EQUATIONS HERE; BASICALLY THE EQUATIONS THAT WILL
//		CALCULATE THE OUTPUTS BASED ON THE PARAMETERS AND THE INPUTS.	REFER TO
//		CHAPTER 3 OF THE TRNSYS VOLUME 1 MANUAL FOR DETAILED INFORMATION ON
//		WRITING TRNSYS COMPONENTS.













//-----------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------
//    SET THE STORAGE ARRAY AT THE END OF THIS ITERATION IF NECESSARY
//      nitmes=
//      stored(1)=
//	    setStorageVars(STORED,NITEMS,INFO)
//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------
//    REPORT ANY PROBLEMS THAT HAVE BEEN FOUND USING CALLS LIKE THIS:
//      MESSAGES(-1,'put your message here','MESSAGE',IUNIT,ITYPE)
//      MESSAGES(-1,'put your message here','WARNING',IUNIT,ITYPE)
//      MESSAGES(-1,'put your message here','SEVERE',IUNIT,ITYPE)
//      MESSAGES(-1,'put your message here','FATAL',IUNIT,ITYPE)
//-----------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------
//    SET THE OUTPUTS FROM THIS MODEL IN SEQUENTIAL ORDER AND GET OUT

//		 Maximum illuminance
			xout[0]=?;
//		 Minimum illuminance
			xout[1]=?;
//		 Average illuminance
			xout[2]=?;
//		 Control1
			xout[3]=?;
//		 Control2
			xout[4]=?;
//		 Control3
			xout[5]=?;
//		 Control4
			xout[6]=?;
//		 Control5
			xout[7]=?;
//		 Control6
			xout[8]=?;
//		 Control7
			xout[9]=?;
//		 Control8
			xout[10]=?;
//		 Control9
			xout[11]=?;
//		 Control10
			xout[12]=?;

//-----------------------------------------------------------------------------------------------------------------------
//    EVERYTHING IS DONE - RETURN FROM THIS SUBROUTINE AND MOVE ON
      return 1;
      }
//-----------------------------------------------------------------------------------------------------------------------
